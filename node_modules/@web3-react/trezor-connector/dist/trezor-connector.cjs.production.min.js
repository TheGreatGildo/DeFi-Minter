"use strict";function r(r){return r&&"object"==typeof r&&"default"in r?r.default:r}var e=require("@web3-react/abstract-connector"),t=r(require("web3-provider-engine")),n=require("@0x/subproviders/lib/src/subproviders/trezor"),i=r(require("web3-provider-engine/subproviders/cache.js")),o=require("@0x/subproviders/lib/src/subproviders/rpc_subprovider");function c(){return(c=Object.assign||function(r){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(r[n]=t[n])}return r}).apply(this,arguments)}exports.TrezorConnector=function(r){var e,u;function s(e){var t,n=e.chainId,i=e.url,o=e.pollingInterval,c=e.requestTimeoutMs,u=e.config,s=void 0===u?{}:u,a=e.manifestEmail,p=e.manifestAppUrl;return(t=r.call(this,{supportedChainIds:[n]})||this).chainId=n,t.url=i,t.pollingInterval=o,t.requestTimeoutMs=c,t.config=s,t.manifestEmail=a,t.manifestAppUrl=p,t}u=r,(e=s).prototype=Object.create(u.prototype),e.prototype.constructor=e,e.__proto__=u;var a=s.prototype;return a.activate=function(){try{var r=function(){return e.provider.start(),{provider:e.provider,chainId:e.chainId}},e=this,u=function(){if(!e.provider)return Promise.resolve(new Promise((function(r){r(function(r){if(r&&r.__esModule)return r;var e={};return r&&Object.keys(r).forEach((function(t){var n=Object.getOwnPropertyDescriptor(r,t);Object.defineProperty(e,t,n.get?n:{enumerable:!0,get:function(){return r[t]}})})),e.default=r,e}(require("trezor-connect")))}))).then((function(r){var u=r.default;u.manifest({email:e.manifestEmail,appUrl:e.manifestAppUrl});var s=new t({pollingInterval:e.pollingInterval});s.addProvider(new n.TrezorSubprovider(c({trezorConnectClientApi:u},e.config))),s.addProvider(new i),s.addProvider(new o.RPCSubprovider(e.url,e.requestTimeoutMs)),e.provider=s}))}();return Promise.resolve(u&&u.then?u.then(r):r())}catch(r){return Promise.reject(r)}},a.getProvider=function(){try{return Promise.resolve(this.provider)}catch(r){return Promise.reject(r)}},a.getChainId=function(){try{return Promise.resolve(this.chainId)}catch(r){return Promise.reject(r)}},a.getAccount=function(){try{return Promise.resolve(this.provider._providers[0].getAccountsAsync(1).then((function(r){return r[0]})))}catch(r){return Promise.reject(r)}},a.deactivate=function(){this.provider.stop()},s}(e.AbstractConnector);
//# sourceMappingURL=trezor-connector.cjs.production.min.js.map
