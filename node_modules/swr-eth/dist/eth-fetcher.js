"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ethFetcher = void 0;
var contracts_1 = require("@ethersproject/contracts");
var address_1 = require("@ethersproject/address");
var Errors_1 = require("./Errors");
exports.ethFetcher = function (library, ABIs) { return function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var arg1 = args[0], arg2 = args[1], params = args.slice(2);
    // it's a contract
    if (address_1.isAddress(arg1)) {
        if (!ABIs)
            throw new Errors_1.ABIError("ABI repo not found");
        if (!ABIs.get)
            throw new Errors_1.ABIError("ABI repo isn't a Map");
        var address = arg1;
        var method_1 = arg2;
        var abi = ABIs.get(address);
        if (!abi)
            throw new Errors_1.ABINotFound("ABI not found for " + address);
        var contract = new contracts_1.Contract(address, abi, library.getSigner());
        return contract[method_1].apply(contract, params);
    }
    // it's a eth call
    var method = arg1;
    return library[method].apply(library, __spreadArrays([arg2], params));
}; };
exports.default = exports.ethFetcher;
