"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = require("@0x/assert");
var json_schemas_1 = require("@0x/json-schemas");
var utils_1 = require("@0x/utils");
var web3_wrapper_1 = require("@0x/web3-wrapper");
var ethereum_types_1 = require("ethereum-types");
var ethereumjs_account_1 = require("ethereumjs-account");
var util = require("ethereumjs-util");
var ethereumjs_vm_1 = require("ethereumjs-vm");
var promisified_1 = require("ethereumjs-vm/dist/state/promisified");
var utils_2 = require("./utils");
exports.linkLibrariesInBytecode = utils_2.linkLibrariesInBytecode;
exports.methodAbiToFunctionSignature = utils_2.methodAbiToFunctionSignature;
var utils_3 = require("./utils");
var subscription_manager_1 = require("./subscription_manager");
exports.SubscriptionManager = subscription_manager_1.SubscriptionManager;
var types_1 = require("./types");
exports.SubscriptionErrors = types_1.SubscriptionErrors;
var ARBITRARY_PRIVATE_KEY = 'e331b6d69882b4cb4ea581d88e0b604039a3de5967688d3dcffdd2270c0fd109';
// tslint:disable: max-classes-per-file
/**
 * @dev A promise-compatible type that exposes a `txHash` field.
 *      Not used by BaseContract, but generated contracts will return it in
 *      `awaitTransactionSuccessAsync()`.
 *      Maybe there's a better place for this.
 */
var PromiseWithTransactionHash = /** @class */ (function () {
    function PromiseWithTransactionHash(txHashPromise, promise) {
        this.txHashPromise = txHashPromise;
        this._promise = promise;
    }
    // tslint:disable:promise-function-async
    // tslint:disable:async-suffix
    PromiseWithTransactionHash.prototype.then = function (onFulfilled, onRejected) {
        return this._promise.then(onFulfilled, onRejected);
    };
    PromiseWithTransactionHash.prototype.catch = function (onRejected) {
        return this._promise.catch(onRejected);
    };
    PromiseWithTransactionHash.prototype.finally = function (onFinally) {
        return this._promise.finally(onFinally);
    };
    Object.defineProperty(PromiseWithTransactionHash.prototype, Symbol.toStringTag, {
        // tslint:enable:promise-function-async
        // tslint:enable:async-suffix
        get: function () {
            return this._promise[Symbol.toStringTag];
        },
        enumerable: true,
        configurable: true
    });
    return PromiseWithTransactionHash;
}());
exports.PromiseWithTransactionHash = PromiseWithTransactionHash;
var BaseContract = /** @class */ (function () {
    /// @dev Constructs a contract wrapper.
    /// @param contractName Name of contract.
    /// @param abi of the contract.
    /// @param address of the deployed contract.
    /// @param supportedProvider for communicating with an ethereum node.
    /// @param logDecodeDependencies the name and ABI of contracts whose event logs are
    ///        decoded by this wrapper.
    /// @param deployedBytecode the deployedBytecode of the contract, used for executing
    ///        pure Solidity functions in memory. This is different from the bytecode.
    function BaseContract(contractName, abi, address, supportedProvider, callAndTxnDefaults, logDecodeDependencies, deployedBytecode) {
        var _this = this;
        this.constructorArgs = [];
        assert_1.assert.isString('contractName', contractName);
        assert_1.assert.isETHAddressHex('address', address);
        if (deployedBytecode !== undefined && deployedBytecode !== '') {
            // `deployedBytecode` might contain references to
            // unlinked libraries and, hence, would not be a hex string. We'll just
            // leave `_deployedBytecodeIfExists` empty if this is the case.
            // TODO(dorothy-zbornak): We should link the `deployedBytecode`
            // beforehand in the generated wrappers.
            try {
                assert_1.assert.isHexString('deployedBytecode', deployedBytecode);
                this._deployedBytecodeIfExists = Buffer.from(deployedBytecode.substr(2), 'hex');
            }
            catch (err) {
                // Do nothing.
            }
        }
        var provider = utils_1.providerUtils.standardizeOrThrow(supportedProvider);
        if (callAndTxnDefaults !== undefined) {
            assert_1.assert.doesConformToSchema('callAndTxnDefaults', callAndTxnDefaults, json_schemas_1.schemas.callDataSchema, [
                json_schemas_1.schemas.addressSchema,
                json_schemas_1.schemas.numberSchema,
                json_schemas_1.schemas.jsNumber,
            ]);
        }
        this.contractName = contractName;
        this._web3Wrapper = new web3_wrapper_1.Web3Wrapper(provider, callAndTxnDefaults);
        this.abi = abi;
        this.address = address;
        var methodAbis = this.abi.filter(function (abiDefinition) { return abiDefinition.type === ethereum_types_1.AbiType.Function; });
        this._abiEncoderByFunctionSignature = {};
        methodAbis.forEach(function (methodAbi) {
            var abiEncoder = new utils_1.AbiEncoder.Method(methodAbi);
            var functionSignature = abiEncoder.getSignature();
            _this._abiEncoderByFunctionSignature[functionSignature] = abiEncoder;
            _this._web3Wrapper.abiDecoder.addABI(abi, contractName);
        });
        if (logDecodeDependencies) {
            Object.entries(logDecodeDependencies).forEach(function (_a) {
                var _b = __read(_a, 2), dependencyName = _b[0], dependencyAbi = _b[1];
                return _this._web3Wrapper.abiDecoder.addABI(dependencyAbi, dependencyName);
            });
        }
    }
    BaseContract._formatABIDataItemList = function (abis, values, formatter) {
        return values.map(function (value, i) { return utils_3.formatABIDataItem(abis[i], value, formatter); });
    };
    BaseContract._lowercaseAddress = function (type, value) {
        return type === 'address' ? value.toLowerCase() : value;
    };
    BaseContract._bigNumberToString = function (_type, value) {
        return utils_1.BigNumber.isBigNumber(value) ? value.toString() : value;
    };
    BaseContract._lookupConstructorAbi = function (abi) {
        var constructorAbiIfExists = abi.find(function (abiDefinition) { return abiDefinition.type === ethereum_types_1.AbiType.Constructor; });
        if (constructorAbiIfExists !== undefined) {
            return constructorAbiIfExists;
        }
        else {
            // If the constructor is not explicitly defined, it won't be included in the ABI. It is
            // still callable however, so we construct what the ABI would look like were it to exist.
            var defaultConstructorAbi = {
                type: ethereum_types_1.AbiType.Constructor,
                stateMutability: 'nonpayable',
                payable: false,
                inputs: [],
            };
            return defaultConstructorAbi;
        }
    };
    BaseContract._throwIfCallResultIsRevertError = function (rawCallResult) {
        // Try to decode the call result as a revert error.
        var revert;
        try {
            revert = utils_1.decodeBytesAsRevertError(rawCallResult);
        }
        catch (err) {
            // Can't decode it as a revert error, so assume it didn't revert.
            return;
        }
        throw revert;
    };
    BaseContract._throwIfThrownErrorIsRevertError = function (error) {
        // Try to decode a thrown error.
        var revertError;
        try {
            revertError = utils_1.decodeThrownErrorAsRevertError(error);
        }
        catch (err) {
            // Can't decode it.
            return;
        }
        // Re-cast StringRevertErrors as plain Errors for backwards-compatibility.
        if (revertError instanceof utils_1.StringRevertError) {
            throw new Error(revertError.values.message);
        }
        throw revertError;
    };
    BaseContract._throwIfUnexpectedEmptyCallResult = function (rawCallResult, methodAbi) {
        // With live nodes, we will receive an empty call result if:
        // 1. The function has no return value.
        // 2. The contract reverts without data.
        // 3. The contract reverts with an invalid opcode (`assert(false)` or `invalid()`).
        if (!rawCallResult || rawCallResult === '0x') {
            var returnValueDataItem = methodAbi.getReturnValueDataItem();
            if (returnValueDataItem.components === undefined || returnValueDataItem.components.length === 0) {
                // Expected no result (which makes it hard to tell if the call reverted).
                return;
            }
            throw new Error("Function \"" + methodAbi.getSignature() + "\" reverted with no data");
        }
    };
    // Throws if the given arguments cannot be safely/correctly encoded based on
    // the given inputAbi. An argument may not be considered safely encodeable
    // if it overflows the corresponding Solidity type, there is a bug in the
    // encoder, or the encoder performs unsafe type coercion.
    BaseContract.strictArgumentEncodingCheck = function (inputAbi, args) {
        var abiEncoder = utils_1.AbiEncoder.create(inputAbi);
        var params = utils_1.abiUtils.parseEthersParams(inputAbi);
        var rawEncoded = abiEncoder.encode(args);
        var rawDecoded = abiEncoder.decodeAsArray(rawEncoded);
        for (var i = 0; i < rawDecoded.length; i++) {
            var original = args[i];
            var decoded = rawDecoded[i];
            if (!utils_1.abiUtils.isAbiDataEqual(params.names[i], params.types[i], original, decoded)) {
                throw new Error("Cannot safely encode argument: " + params.names[i] + " (" + original + ") of type " + params.types[i] + ". (Possible type overflow or other encoding error)");
            }
        }
        return rawEncoded;
    };
    BaseContract._applyDefaultsToContractTxDataAsync = function (txData, estimateGasAsync) {
        return __awaiter(this, void 0, void 0, function () {
            var txDataWithDefaults, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        txDataWithDefaults = BaseContract._removeUndefinedProperties(txData);
                        if (!(txDataWithDefaults.gas === undefined && estimateGasAsync !== undefined)) return [3 /*break*/, 2];
                        _a = txDataWithDefaults;
                        return [4 /*yield*/, estimateGasAsync(txDataWithDefaults)];
                    case 1:
                        _a.gas = _b.sent();
                        _b.label = 2;
                    case 2:
                        if (txDataWithDefaults.from !== undefined) {
                            txDataWithDefaults.from = txDataWithDefaults.from.toLowerCase();
                        }
                        return [2 /*return*/, txDataWithDefaults];
                }
            });
        });
    };
    BaseContract._assertCallParams = function (callData, defaultBlock) {
        assert_1.assert.doesConformToSchema('callData', callData, json_schemas_1.schemas.callDataSchema, [
            json_schemas_1.schemas.addressSchema,
            json_schemas_1.schemas.numberSchema,
            json_schemas_1.schemas.jsNumber,
        ]);
        if (defaultBlock !== undefined) {
            assert_1.assert.isBlockParam('defaultBlock', defaultBlock);
        }
    };
    BaseContract._removeUndefinedProperties = function (props) {
        var clonedProps = __assign({}, props);
        Object.keys(clonedProps).forEach(function (key) { return clonedProps[key] === undefined && delete clonedProps[key]; });
        return clonedProps;
    };
    BaseContract.prototype._promiseWithTransactionHash = function (txHashPromise, opts) {
        var _this = this;
        return new PromiseWithTransactionHash(txHashPromise, (function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _b = (_a = this._web3Wrapper).awaitTransactionSuccessAsync;
                        return [4 /*yield*/, txHashPromise];
                    case 1: 
                    // When the transaction hash resolves, wait for it to be mined.
                    return [2 /*return*/, _b.apply(_a, [_c.sent(),
                            opts.pollingIntervalMs,
                            opts.timeoutMs])];
                }
            });
        }); })());
    };
    BaseContract.prototype._applyDefaultsToTxDataAsync = function (txData, estimateGasAsync) {
        return __awaiter(this, void 0, void 0, function () {
            var txDataWithDefaults, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        txDataWithDefaults = __assign({ to: this.address }, this._web3Wrapper.getContractDefaults(), BaseContract._removeUndefinedProperties(txData));
                        if (!(txDataWithDefaults.gas === undefined && estimateGasAsync !== undefined)) return [3 /*break*/, 2];
                        _a = txDataWithDefaults;
                        return [4 /*yield*/, estimateGasAsync(txDataWithDefaults)];
                    case 1:
                        _a.gas = _b.sent();
                        _b.label = 2;
                    case 2:
                        if (txDataWithDefaults.from !== undefined) {
                            txDataWithDefaults.from = txDataWithDefaults.from.toLowerCase();
                        }
                        return [2 /*return*/, txDataWithDefaults];
                }
            });
        });
    };
    BaseContract.prototype._evmExecAsync = function (encodedData) {
        return __awaiter(this, void 0, void 0, function () {
            var encodedDataBytes, addressBuf, vm, psm, accountPk, accountAddress, account, contractCode, rawCallResult, result, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        encodedDataBytes = Buffer.from(encodedData.substr(2), 'hex');
                        addressBuf = Buffer.from(this.address.substr(2), 'hex');
                        if (!(this._evmIfExists === undefined)) return [3 /*break*/, 5];
                        vm = new ethereumjs_vm_1.default({});
                        psm = new promisified_1.default(vm.stateManager);
                        accountPk = Buffer.from(ARBITRARY_PRIVATE_KEY, 'hex');
                        accountAddress = util.privateToAddress(accountPk);
                        account = new ethereumjs_account_1.default({ balance: 1e18 });
                        return [4 /*yield*/, psm.putAccount(accountAddress, account)];
                    case 1:
                        _a.sent();
                        if (!(this._deployedBytecodeIfExists === undefined)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this._web3Wrapper.getContractCodeAsync(this.address)];
                    case 2:
                        contractCode = _a.sent();
                        this._deployedBytecodeIfExists = Buffer.from(contractCode.substr(2), 'hex');
                        _a.label = 3;
                    case 3: return [4 /*yield*/, psm.putContractCode(addressBuf, this._deployedBytecodeIfExists)];
                    case 4:
                        _a.sent();
                        // save for later
                        this._evmIfExists = vm;
                        this._evmAccountIfExists = accountAddress;
                        _a.label = 5;
                    case 5:
                        _a.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, this._evmIfExists.runCall({
                                to: addressBuf,
                                caller: this._evmAccountIfExists,
                                origin: this._evmAccountIfExists,
                                data: encodedDataBytes,
                            })];
                    case 6:
                        result = _a.sent();
                        rawCallResult = "0x" + result.execResult.returnValue.toString('hex');
                        return [3 /*break*/, 8];
                    case 7:
                        err_1 = _a.sent();
                        BaseContract._throwIfThrownErrorIsRevertError(err_1);
                        throw err_1;
                    case 8:
                        BaseContract._throwIfCallResultIsRevertError(rawCallResult);
                        return [2 /*return*/, rawCallResult];
                }
            });
        });
    };
    BaseContract.prototype._performCallAsync = function (callData, defaultBlock) {
        return __awaiter(this, void 0, void 0, function () {
            var callDataWithDefaults, rawCallResult, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._applyDefaultsToTxDataAsync(callData)];
                    case 1:
                        callDataWithDefaults = _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, this._web3Wrapper.callAsync(callDataWithDefaults, defaultBlock)];
                    case 3:
                        rawCallResult = _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        err_2 = _a.sent();
                        BaseContract._throwIfThrownErrorIsRevertError(err_2);
                        throw err_2;
                    case 5:
                        BaseContract._throwIfCallResultIsRevertError(rawCallResult);
                        return [2 /*return*/, rawCallResult];
                }
            });
        });
    };
    BaseContract.prototype._lookupAbiEncoder = function (functionSignature) {
        var abiEncoder = this._abiEncoderByFunctionSignature[functionSignature];
        if (abiEncoder === undefined) {
            throw new Error("Failed to lookup method with function signature '" + functionSignature + "'");
        }
        return abiEncoder;
    };
    BaseContract.prototype._lookupAbi = function (functionSignature) {
        var methodAbi = this.abi.find(function (abiDefinition) {
            if (abiDefinition.type !== ethereum_types_1.AbiType.Function) {
                return false;
            }
            // tslint:disable-next-line:no-unnecessary-type-assertion
            var abiFunctionSignature = new utils_1.AbiEncoder.Method(abiDefinition).getSignature();
            if (abiFunctionSignature === functionSignature) {
                return true;
            }
            return false;
        });
        return methodAbi;
    };
    BaseContract.prototype._strictEncodeArguments = function (functionSignature, functionArguments) {
        var abiEncoder = this._lookupAbiEncoder(functionSignature);
        var inputAbi = abiEncoder.getDataItem().components;
        if (inputAbi === undefined) {
            throw new Error("Undefined Method Input ABI");
        }
        var abiEncodedArguments = abiEncoder.encode(functionArguments);
        return abiEncodedArguments;
    };
    return BaseContract;
}());
exports.BaseContract = BaseContract;
//# sourceMappingURL=index.js.map