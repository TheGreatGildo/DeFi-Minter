"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("@0x/utils");
// tslint:disable-next-line:completed-docs
function formatABIDataItem(abi, value, formatter) {
    var trailingArrayRegex = /\[\d*\]$/;
    if (abi.type.match(trailingArrayRegex)) {
        var arrayItemType_1 = abi.type.replace(trailingArrayRegex, '');
        return value.map(function (val) {
            var arrayItemAbi = __assign({}, abi, { type: arrayItemType_1 });
            return formatABIDataItem(arrayItemAbi, val, formatter);
        });
    }
    else if (abi.type === 'tuple') {
        var formattedTuple_1 = {};
        if (abi.components) {
            abi.components.forEach(function (componentABI) {
                formattedTuple_1[componentABI.name] = formatABIDataItem(componentABI, value[componentABI.name], formatter);
            });
        }
        return formattedTuple_1;
    }
    else {
        return formatter(abi.type, value);
    }
}
exports.formatABIDataItem = formatABIDataItem;
/**
 * Takes a MethodAbi and returns a function signature for ABI encoding/decoding
 * @return a function signature as a string, e.g. 'functionName(uint256, bytes[])'
 */
function methodAbiToFunctionSignature(methodAbi) {
    var method = utils_1.AbiEncoder.createMethod(methodAbi.name, methodAbi.inputs);
    return method.getSignature();
}
exports.methodAbiToFunctionSignature = methodAbiToFunctionSignature;
/**
 * Replaces unliked library references in the bytecode of a contract artifact
 * with real addresses and returns the bytecode.
 */
function linkLibrariesInBytecode(artifact, libraryAddresses) {
    var e_1, _a, e_2, _b, e_3, _c;
    var bytecodeArtifact = artifact.compilerOutput.evm.bytecode;
    var bytecode = bytecodeArtifact.object.substr(2);
    try {
        for (var _d = __values(Object.values(bytecodeArtifact.linkReferences)), _e = _d.next(); !_e.done; _e = _d.next()) {
            var link = _e.value;
            try {
                for (var _f = __values(Object.entries(link)), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var _h = __read(_g.value, 2), libraryName = _h[0], libraryRefs = _h[1];
                    var libraryAddress = libraryAddresses[libraryName];
                    if (!libraryAddress) {
                        throw new Error(artifact.contractName + " has an unlinked reference library " + libraryName + " but no addresses was provided'.");
                    }
                    try {
                        for (var libraryRefs_1 = __values(libraryRefs), libraryRefs_1_1 = libraryRefs_1.next(); !libraryRefs_1_1.done; libraryRefs_1_1 = libraryRefs_1.next()) {
                            var ref = libraryRefs_1_1.value;
                            bytecode = [
                                bytecode.substring(0, ref.start * 2),
                                libraryAddress.toLowerCase().substr(2),
                                bytecode.substring((ref.start + ref.length) * 2),
                            ].join('');
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (libraryRefs_1_1 && !libraryRefs_1_1.done && (_c = libraryRefs_1.return)) _c.call(libraryRefs_1);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return "0x" + bytecode;
}
exports.linkLibrariesInBytecode = linkLibrariesInBytecode;
//# sourceMappingURL=utils.js.map